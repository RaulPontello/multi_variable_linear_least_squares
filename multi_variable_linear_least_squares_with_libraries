import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.api as sm

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from yellowbrick.regressor import residuals_plot
from sklearn import metrics

# Input

data = pd.read_csv('data.csv', sep = ',')
x = data[['SAT']]
y = data['GPA']

# Output

# Correlation matrix

correlation_matrix = data.corr()

# Create Linear Regression (y = bo + b * x + e)

linear_regression = LinearRegression()  # create object for the class

# Perform linear regression

linear_regression.fit(x, y)  # perform linear regression

# Determine coefficients bo and b1

b0 = linear_regression.intercept_
b = linear_regression.coef_

# Summary table

summary_table = sm.OLS(y, sm.add_constant(x)).fit().summary()

# Make predictions for y

y_predicted = linear_regression.predict(x)

# Residuals
  
residuals = y - y_predicted

# Model metrics

R_squared_train = linear_regression.score(x, y)
R_squared_test = metrics.r2_score(y, y_predicted)
mean_squared_error = metrics.mean_squared_error(y, y_predicted)
root_mean_squared_error = mean_squared_error ** 0.5
mean_absolute_error = metrics.mean_absolute_error(y, y_predicted)

# Create figures

fig, ax = plt.subplots(1,3,figsize=(22,6))

# Set figures

sns.scatterplot(x = y_predicted, y = residuals, ax=ax[0])
ax[0].axhline(residuals.mean(), ls='--', color = 'red')
sns.distplot(x = residuals, ax=ax[1], bins = 50)
ax[1].axvline(residuals.mean(), ls='--', color = 'red')
sns.scatterplot(x = y_predicted, y = y, ax=ax[2])
ax[0].set_title('Verify homoscedasticity of residuals', fontsize=18)
ax[0].set_xlabel('y_real', fontsize=14)
ax[0].set_ylabel('residuals', fontsize=14)
ax[1].set_xlabel('residual', fontsize=14)
ax[1].set_ylabel('frequence', fontsize=14)
ax[1].set_title('Verify frequence distribution of residuals', fontsize=18)
ax[2].set_xlabel('y_predicted', fontsize=14)
ax[2].set_ylabel('y_real', fontsize=14)
ax[2].set_title('y_real x y_predicted', fontsize=18)

# Results

#print('correlation_matrix = ', correlation_matrix)
print('bo = ', b0)
print('b = ', b)
print('R² train = ', R_squared_train)
print('R² test = ', R_squared_test)
print('mean_squared_error = ', mean_squared_error)
print('mean_absolute_error = ', mean_absolute_error)
print('root_mean_squared_error = ', root_mean_squared_error)
#print('y_predicted = ', y_predicted)
print(summary_table)
